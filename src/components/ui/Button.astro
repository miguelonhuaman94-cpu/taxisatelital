---
import { cva, type VariantProps } from "class-variance-authority";
import { cn } from "@/lib/utils";

const buttonVariants = cva(
  "inline-flex items-center hover:cursor-pointer justify-center gap-2 whitespace-nowrap rounded-md text-sm font-semibold ring-offset-background transition focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
  {
    variants: {
      variant: {
        default:
          "bg-primary text-primary-foreground hover:bg-primary/90 button-brand",
        destructive:
          "bg-destructive text-destructive-foreground hover:bg-destructive/90",
        outline:
          "border border-input bg-background hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-brand-gray text-brand-gray-foreground hover:bg-brand-gray/80",
        secondaryOutline:
          "border border-brand-gray text-brand-gray hover:bg-brand-gray hover:text-white transition-brand",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
        brand:
          "bg-primary text-white hover:bg-primary/90 button-brand font-semibold",
        brandOutline:
          "border-2 border-primary text-primary bg-transparent hover:bg-primary hover:text-white transition-brand",
        hero: "bg-white text-primary hover:bg-gray-50 button-brand font-bold text-lg px-8 py-4 h-auto",
      },
      size: {
        default: "h-10 px-4 py-2",
        sm: "h-9 rounded-md px-3",
        lg: "h-11 rounded-md px-8",
        xl: "h-14 rounded-lg px-10 text-lg",
        icon: "h-10 w-10",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
);

export type ButtonProps = VariantProps<typeof buttonVariants> & {
  class?: string;
  type?: "button" | "submit" | "reset";
  disabled?: boolean;
  variant?:
    | "default"
    | "destructive"
    | "outline"
    | "secondary"
    | "secondaryOutline"
    | "ghost"
    | "link"
    | "brand"
    | "brandOutline"
    | "hero";
  // Any other props you want to support
};

const {
  variant = "default",
  size = "default",
  class: className = "",
  type = "button",
  disabled = false,
  ...rest
} = Astro.props as ButtonProps;
---

<button
  class={cn(buttonVariants({ variant, size, className }))}
  type={type}
  disabled={disabled}
  {...rest}
>
  <slot />
</button>
